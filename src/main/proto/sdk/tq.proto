//
// Copyright Â© 2019 Turtlequeue limited (hello@turtlequeue.com)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";
// follow the style in:
// https://developers.google.com/protocol-buffers/docs/style
//
// protoc --java_out=src/java/  src/main/proto/tq.proto
//  protoc -I=$DIR tq.proto \
// --js_out=import_style=commonjs:$OUT_DIR \
// --grpc-web_out=import_style=commonjs,mode=grpcwebtext:$OUT_DIR

package tq;

// [START java_declaration]
option java_package = "com.turtlequeue.sdk.api.proto";
// TODO use different packages for this
// option optimize_for = LITE_RUNTIME;

// option java_outer_classname = "Tq";
// [END java_declaration]


// https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto
// https://github.com/googleapis/common-protos-java/blob/master/proto-google-common-protos/src/main/proto/google/rpc/error_details.proto

// import "google/rpc/error_details.proto";

message Topic {
  bool persistent = 1;
  string namespace = 2;
  string topic = 3;
}


enum TimeUnit {
  NONE = 0;
  DAYS = 1;
  HOURS = 2;
  MICROSECONDS = 3;
  MILLISECONDS = 4;
  MINUTES = 5;
  NANOSECONDS = 6;
  SECONDS = 7;
}

enum SubType {
  EXCLUSIVE_SUB = 0;
  SHARED_SUB = 1;
  FAILOVER_SUB  = 2;
  KEY_SHARED_SUB = 3;
}

enum SubscriptionMode {
  DURABLE = 0;
  NON_DURABLE = 1;
}

message MessageIdData {
  // correct value from pulsar in .proto
  // However pulsar MessageId/latest
  // uses signed ints so 2.63-1 instead of 2.64-1
  uint64 ledger_id = 1;
  uint64 entry_id  = 2;
  int32 partition = 3; // optional [default = -1];
  // int32 batch_index = 4; // [default = -1];
  //repeated int64 ack_set = 5;
}


// handshake
// auth done in metadata (headers)
//
message CommandConnect {
  string client_version = 1; // eg. java+0.0.1
  string auth_method_name = 2;
  string format = 3;    // default format for messages payload
  bool auto_ack = 4;    // optional, default to false
}

message ReplyConnect {
  // string server_version = 1; // acts as ACK
  string uuid = 1;              //
}


// Commands to probe the state of connection.
// When either client or broker doesn't receive commands for certain
// amount of time, they will send a Ping probe.
message CommandPing {}
message ReplyPong {}

// allows using in metadata on it's own
message RequestId {
  uint64 request_id = 1;
}

// like google status codes
// https://github.com/googleapis/googleapis/blob/37ba54d7ed4da3052ceff96292631c3b6aae0e63/google/rpc/error_details.proto#L112-L136
// but without depending on them
message ErrorInfo {
  // The reason of the error. This is a constant value that identifies the
  // proximate cause of the error. Error reasons are unique within a particular
  // domain of errors. This should be at most 63 characters and match
  // /[A-Z0-9_]+/.
  string reason = 1;

  // The logical grouping to which the "reason" belongs. The error domain
  // is typically the registered service name of the tool or product that
  // generates the error. Example: "pubsub.googleapis.com". If the error is
  // generated by some common infrastructure, the error domain must be a
  // globally unique value that identifies the infrastructure. For Google API
  // infrastructure, the error domain is "googleapis.com".
  string domain = 2;

  // Additional structured details about this error.
  //
  // Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in
  // length. When identifying the current value of an exceeded limit, the units
  // should be contained in the key, not the value.  For example, rather than
  // {"instanceLimit": "100/request"}, should be returned as,
  // {"instanceLimitPerRequest": "100"}, if the client exceeds the number of
  // instances that can be created in a single (batch) request.
  map<string, string> metadata = 3;
}

message ReplyError {

  ErrorInfo error_info = 1;
  enum KnownError {
    GENERIC_EXCEPTION = 0; // to avoid getting a default 0
    ALREADY_CLOSED_EXCEPTION = 1;
    AUTHENTICATION_EXCEPTION = 2;
    AUTHORIZATION_EXCEPTION = 3;
    BROKER_METADATA_EXCEPTION = 4;
    BROKER_PERSISTENCE_EXCEPTION = 5;
    CHECKSUM_EXCEPTION = 6;
    CONNECT_EXCEPTION = 7;
    CONSUMER_ASSIGN_EXCEPTION = 8;
    CONSUMER_BUSY_EXCEPTION = 9;
    CRYPTO_EXCEPTION = 10;
    GETTING_AUTHENTICATION_DATA_EXCEPTION = 11;
    INCOMPATIBLE_SCHEMA_EXCEPTION = 12;
    INVALID_CONFIGURATION_EXCEPTION = 13;
    INVALID_MESSAGE_EXCEPTION = 14;
    INVALID_SERVICE_URL = 15;
    INVALID_TOPIC_NAME_EXCEPTION = 16; // SDK?
    LOOKUP_EXCEPTION = 17;
    MESSAGE_ACKNOWLEDGE_EXCEPTION = 18;
    NOT_ALLOWED_EXCEPTION = 19;
    NOT_CONNECTED_EXCEPTION = 20;
    NOT_FOUND_EXCEPTION = 21;
    NOT_SUPPORTED_EXCEPTION = 22;
    PRODUCER_BLOCKED_QUOTA_EXCEEDED_ERROR = 23;
    PRODUCER_BLOCKED_QUOTA_EXCEEDED_EXCEPTION = 24;
    PRODUCER_BUSY_EXCEPTION = 25;
    PRODUCER_QUEUE_IS_FULL_ERROR = 26;
    TIMEOUT_EXCEPTION = 27;
    TOPIC_DOES_NOT_EXIST_EXCEPTION = 28;
    TOPIC_TERMINATED_EXCEPTION = 29;
    TRANSACTION_CONFLICT_EXCEPTION = 30;
    UNSUPPORTED_AUTHENTICATION_EXCEPTION = 31;
  }
  KnownError known_error = 2; // optional
  int64 sequence_id = 3;      // optional
}

//
// PUBLISH
//

// https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/TypedMessageBuilder.html
message CommandSend {
  //uint64 producer_id = 1;
  bytes payload = 1;
  uint64 event_time = 2;              // optional time of the event
  string key = 3;                     // optional Sets the key of the message for routing policy
  bool replication_disabled = 4;      // optional, defaults to false
  map<string, string> properties = 5;
  TimeUnit delay_time_unit = 6;       // optional delay
  uint64 delay_time_value = 7;
}

// create a publisher
enum MessageRoutingMode {
  SINGLE_PARTITION = 0;
  // CUMULATIVE = 1;
}

enum CompressionType {
  NONE_COMPRESSION   = 0;
  LZ4    = 1; // TODO default?
  ZLIB   = 2;
  // ZSTD   = 3;
  // SNAPPY   = 4;
}

enum ProducerAccessMode {
  SHARED_PROD = 0; // By default multiple producers can publish on a topic
  EXCLUSIVE_PROD = 1; // Require exclusive access for producer. Fail immediately if there's already a producer connected.
  WAIT_FOR_EXCLUSIVE_PROD = 2; // Producer creation is pending until it can acquire exclusive access
}

message CommandProducerCreate {
  enum HashingScheme {
    JAVA_STRING_HASH = 0;
    MURMUR3_32HASH = 1;
  }

  // TODO schema
  uint64 producer_id = 1;
  Topic topic = 2;
  string producer_name = 3;            // optional in pulsar, mandatory in Tq?
  bool enable_batching = 4;            // defaults to ?
  uint32 batching_max_messages = 5;
  TimeUnit batching_max_publish_delay_unit = 6;
  uint64 batching_max_publish_delay_value = 7;

  MessageRoutingMode message_routing_mode = 8;
  CompressionType compression_type = 9;
  uint32 max_pending_messages = 10;
  TimeUnit send_timeout_unit = 11;
  uint64 send_timeout_value = 12;

  map<string, string> properties = 13;
  string encryption_key = 14;
  HashingScheme hashing_scheme = 15;
  bool block_if_queue_full = 16;

  // uint64 initial_sequence_id = 15; // commented until I am convinced there is a good use case
  // TODO message_router? or in SDK?
}

// TODO split? ProducerCommand { case ...} ?
// message published to broker
message ResponsePublish {
  MessageIdData message_id = 1;
  //uint64 producer_id = 1; // use the request-id
}

//
// SUBSCRIBE
//
//
// response to a subscription, broker pushes messages to client
// https://github.com/apache/pulsar/blob/01e30741ec05ac0c582f9bb025bd71ac3d1f32eb/pulsar-common/src/main/proto/PulsarApi.proto#L476-L481
message CommandMessage {
  uint64 consumer_id = 1;
  bytes payload = 2;
  MessageIdData message_id = 3;
  string producer_name = 4;
  uint64 event_time = 5;
  uint64 publish_time = 6;
  uint64 sequence_id = 7;
  string key = 8;
  map<string, string> properties = 9;
  Topic topic = 10; // multi-topic
  bool is_replicated = 11;
  string replicated_from = 12;
  uint32 redelivery_count = 13;
}

message DeadLetterQueuePolicy {
  uint32 max_redelivery_count = 1;
  string dead_letter_topic = 2;
  string retry_topic = 3;
}

// newConsumer.subscribe
message CommandSubscribe {
  uint64 consumer_id = 1; // generated on the client FIXME remove ??
  Topic topic = 2;
  string sub_name = 3;
  string consumer_name = 4;  // optional
  SubType sub_type = 5;
  int32 priority_level = 6;  // optional

  // optional. If specified, the subscription will position the cursor
  // markd-delete position  on the particular message id and
  // initial position: will send messages from that point
  MessageIdData start_message_id = 7;

  uint32 receiver_queue_size = 8;

  // Add optional metadata key=value to this consumer
  map<string, string> meta = 9;

  // https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/ConsumerBuilder.html
  //
  TimeUnit ack_timeout_unit = 10;
  uint64 ack_timeout_value = 11;

  SubscriptionMode subscription_mode = 12;
  string json_path = 13; // reader
  bool enable_retry = 14;
  TimeUnit negative_ack_redelivery_delay_unit = 15;
  uint64 negative_ack_redelivery_delay_value = 16;
  DeadLetterQueuePolicy dead_letter_queue_policy = 17;
}

// success for the above
// could be ReplyConsumerSuccess specifically, or ReplySuccess.. choose generic for now
message ReplySuccess {
  uint64 request_id = 1;
  bytes reply_info = 2; // opt
  //
  // opt, transit stuff. If special objects are needed, make another ReplySomethingSuccess type
  // or an enum??
  //

}


message CommandAck {
  enum AckType {
    INDIVIDUAL = 0;
    CUMULATIVE = 1;
  }

  AckType ack_type         = 1;
  bool negative_ack        = 2;

  // In case of individual acks, the client can pass a list of message ids
  MessageIdData message_id = 3;

  enum ValidationError {
    NO_VALIDATION_ERROR = 0;
    // TODO implement as we go
    // UncompressedSizeCorruption = 1;
    // DecompressionError = 2;
    // ChecksumMismatch = 3; // checksum done in grpc
    // BatchDeSerializeError = 4;
    // DecryptionError = 5;
  }

  ValidationError validation_error = 4;
  // TODO
  map<string, uint64> properties = 5;

  // TODO what is this?
  // uint64 txnid_least_bits = 6; // [default = 0];
  // uint64 txnid_most_bits = 7; // [default = 0];
}


//
// Permits, control flow, schema etc. TODO later
// THIS IMPLIES AN INTERNAL QUEUE IN THE CONSUMER
// The pulsar consumer handles it - the SDK HAS TO WORRY ABOUT IT TOO!
// HAVE TO FIND A WAY TO "SYNCHRONIZE" THE QUEUE FROM CLJ_TQ to SDK
//

message CommandFlow {
  // Max number of messages to prefetch, in addition
  // of any number previously specified
  uint32 message_permits = 1;
}


message CommandUnsubscribe {
  uint64 consumer_id = 1;
}

// Reset an existing consumer to a particular message id
message CommandSeek {
  // only one of these two
  oneof seek_message_oneof {
    MessageIdData message_id = 1;
    uint64 message_publish_time = 2;
  }

}

message CommandRedeliverUnacknowledgedMessages {
  // TODO
  // https://github.com/apache/pulsar/blob/d7f65451dadc573fc2bb75dbb03cce705ed04d0a/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBase.java#L611
}

message CommandCloseConsumer {}

message CommandGetLastMessageId {}


message CommandConsumer {
  uint64 consumer_id = 1;

  oneof consumer_oneof {
    CommandAck command_ack = 2;
    CommandRedeliverUnacknowledgedMessages redeliver_unacknowledged_messages = 3;
    CommandFlow command_flow = 4;
    CommandCloseConsumer command_close_consumer = 5;
    CommandSeek command_seek = 7;
    CommandGetLastMessageId command_get_last_message_id = 8;
  }
}


message CommandCloseProducer {}

message CommandProducer {
  uint64 producer_id = 1;
  oneof producer_oneof {
    CommandCloseProducer command_close_producer = 2;
    CommandSend command_send = 3;
  }
}

message CommandDisconnect {}

//
// BIDI STREAM
//

message ClientToBroker {
  // try to have less than 15 here
  uint64 request_id = 1;

  oneof ctob_oneof {
    CommandConnect command_connect = 2;
    CommandPing command_ping = 3;
    ReplyPong reply_pong = 4;


    CommandSubscribe command_subscribe = 5; // create consumer
    CommandProducerCreate command_producer_create = 6;

    // consumer methods
    CommandConsumer command_consumer = 7;
    CommandProducer command_producer = 8;

    // explicit disconnect
    CommandDisconnect command_disconnect = 9;
  }
}

message CommandEndOfTopic {
  uint64 consumer_id = 1;
}

message CommandGetLastMessageIdResponse {
  MessageIdData last_message_id = 1;
}

message BrokerToClient {
  // try to have less than 15 here
  uint64 request_id = 1;

  oneof btoc_oneof {
    ReplySuccess reply_success = 2;     // generic success, used by consumer creation
    ReplyConnect reply_connect = 3;
    CommandPing command_ping  = 4;
    ReplyPong reply_pong = 5;
    ResponsePublish response_publish = 6;
    ReplyError reply_error = 7;
    CommandMessage command_message = 8;
    CommandEndOfTopic command_end_of_topic = 9;
    CommandGetLastMessageIdResponse command_get_last_message_id_response = 10;
  }
}


service TurtleQueue {
  // ideally use this
  rpc bidilink (stream ClientToBroker) returns (stream BrokerToClient) {};
}
